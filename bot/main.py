import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from database import Database

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = Database()


class FeedbackState(StatesGroup):
    waiting_feedback = State()


main_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]], resize_keyboard=True)


async def on_startup(_):
    await db.create_pool()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ë–î.")


@dp.message_handler(Command("start"))
async def start(message: types.Message):
    await message.answer("""
üéâ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç—É—Ä–∏–∑–º—É. üåç‚úàÔ∏è

–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å:
‚úÖ –ü–æ–º–æ–≥—É —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—É—Ä–æ–≤ –∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º–∏.
‚úÖ –ü–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –æ—Ç –ê –¥–æ –ë.
‚úÖ –†–∞—Å—Å–∫–∞–∂—É –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –∏ –æ—Ç–µ–ª—è—Ö.
‚úÖ –ü–æ–º–æ–≥—É —Å –≤–∏–∑–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ! üòä
""", reply_markup=main_kb)
    await db.register_user_if_not_exists(message.from_user)


@dp.message_handler(Text(equals="–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", ignore_case=True))
async def feedback_request(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await FeedbackState.waiting_feedback.set()


@dp.message_handler(state=FeedbackState.waiting_feedback)
async def save_feedback(message: types.Message, state: FSMContext):
    await db.save_feedback(message.from_user, message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=main_kb)
    await state.finish()


@dp.message_handler()
async def handle_message(message: types.Message):
    await message.answer("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", reply_markup=main_kb)


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
