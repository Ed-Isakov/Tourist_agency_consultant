import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from database import Database
import httpx

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
AGENT_URL = os.getenv("AGENT_URL")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = Database()


class FeedbackState(StatesGroup):
    """
    States group for feedback FSM.
    """
    waiting_feedback = State()


# Main keyboard with a single button for feedback
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]],
    resize_keyboard=True
)


async def on_startup(dp: Dispatcher) -> None:
    """
    Actions to run on bot startup.

    Connects to the database pool.

    Parameters:
    ----------
    dp : Dispatcher
        Aiogram Dispatcher instance (unused)

    Returns:
    -------
    None
    """
    await db.create_pool()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ë–î.")


@dp.message_handler(Command("start"))
async def start(message: types.Message) -> None:
    """
    Handle '/start' command.

    Sends a welcome message and registers the user in the database if new.

    Parameters:
    ----------
    message : types.Message
        Incoming Telegram message object

    Returns:
    -------
    None

    Raises:
    ------
    Exception
        If database operation fails
    """
    welcome_text = (
        "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç—É—Ä–∏–∑–º—É. üåç‚úàÔ∏è\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å:\n"
        "‚úÖ –ü–æ–º–æ–≥—É —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—É—Ä–æ–≤ –∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.\n"
        "‚úÖ –ü–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –æ—Ç –ê –¥–æ –ë.\n"
        "‚úÖ –†–∞—Å—Å–∫–∞–∂—É –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –∏ –æ—Ç–µ–ª—è—Ö.\n"
        "‚úÖ –ü–æ–º–æ–≥—É —Å –≤–∏–∑–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ! üòä"
    )
    await message.answer(welcome_text, reply_markup=main_kb)
    await db.register_user_if_not_exists(message.from_user)


@dp.message_handler(Text(equals="–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", ignore_case=True))
async def feedback_request(message: types.Message, state: FSMContext) -> None:
    """
    Prompt user to provide feedback.

    Sets the FSM state to waiting for feedback.

    Parameters:
    ----------
    message : types.Message
        Incoming Telegram message triggering feedback
    state : FSMContext
        FSM context manager

    Returns:
    -------
    None
    """
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await FeedbackState.waiting_feedback.set()


@dp.message_handler(state=FeedbackState.waiting_feedback)
async def save_feedback(message: types.Message, state: FSMContext) -> None:
    """
    Save user feedback to the database.

    Parameters:
    ----------
    message : types.Message
        Incoming message containing feedback text
    state : FSMContext
        FSM context manager

    Returns:
    -------
    None

    Raises:
    ------
    Exception
        If database operation fails
    """
    await db.save_feedback(message.from_user, message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=main_kb)
    await state.finish()


@dp.message_handler()
async def handle_message(message: types.Message) -> None:
    """
    Forward general messages to the external agent service and respond.

    Sends user message to AGENT_URL, returns agent's response or error message.

    Parameters:
    ----------
    message : types.Message
        Incoming Telegram message

    Returns:
    -------
    None

    Notes:
    -----
    Uses httpx.AsyncClient for HTTP requests.
    """
    payload = {"message": message.text, "thread_id": str(message.from_user.id)}
    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(AGENT_URL, json=payload, timeout=200.0)
            resp.raise_for_status()
            data = resp.json()
            text = data.get("response", "–ê–≥–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        except httpx.RequestError:
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–≥–µ–Ω—Ç–∞."
        except httpx.HTTPStatusError as e:
            text = f"–û—à–∏–±–∫–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞: {e.response.status_code}"
        except ValueError:
            text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞."
    await message.answer(text, reply_markup=main_kb)


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
